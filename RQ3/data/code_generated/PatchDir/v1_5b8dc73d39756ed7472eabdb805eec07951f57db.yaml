name: Test Suite

on: 
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    - cron:  '0 23 * * *'
  push:
    tags:
      - '*'

defaults:
  run:
    shell: bash
jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  build:
    needs: cleanup-runs
    # if: ${{ github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.draft == false }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15]
        include:
          - os: ubuntu-18.04
            version_dependencies: "libssl1.0-dev ffmpeg python-pip npm"
            JAVA_VERSION: "11"
          - os: ubuntu-20.04
            version_dependencies: "libssl-dev ffmpeg python-pip-whl npm libzip5"
            JAVA_VERSION: "14"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Webots Compilation Dependencies [Linux]
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt update
        # common dependencies
        sudo apt -y install git g++ cmake execstack libusb-dev swig openjdk-${{ matrix.JAVA_VERSION }}-jdk python2.7-dev python3.6-dev python3.7-dev python3.8-dev libglu1-mesa-dev libglib2.0-dev libfreeimage-dev libfreetype6-dev libxml2-dev libzzip-0-13 libboost-dev libavcodec-extra libgd3 libssh-gcrypt-dev libzip-dev libreadline-dev pbzip2 libpci-dev libxcb-keysyms1 libxcb-image0 libxcb-icccm4 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0
        # version specific dependencies
        sudo apt -y install ${{ matrix.version_dependencies }}
        # ubuntu server dependencies
        sudo apt -y install libxkbcommon-x11-dev
    - name: Install Webots Compilation Dependencies [macOS]
      if: ${{ startsWith(matrix.os, 'macos') }}
      run: |
        brew install cmake swig wget # node
        npm install -g appdmg
        sudo mkdir -p /Library/Frameworks/Python.framework/Versions/3.7  # we can't use python3.7 from homebrew for the compilation because it is not compatible with the normal one
        if [[ ! -f $WEBOTS_HOME/dependencies/python3.7.zip ]]; then wget -qq https://cyberbotics.com/files/repository/dependencies/mac/release/python3.7.zip -P $WEBOTS_HOME/dependencies; fi
        sudo unzip -o -q $WEBOTS_HOME/dependencies/python3.7.zip -d /Library/Frameworks/Python.framework/Versions/3.7
        sudo mkdir -p /Library/Frameworks/Python.framework/Versions/3.8  # we can't use python3.8 from homebrew for the compilation because it is not compatible with the normal one
        if [[ ! -f $WEBOTS_HOME/dependencies/python3.8.zip ]]; then wget -qq https://cyberbotics.com/files/repository/dependencies/mac/release/python3.8.zip -P $WEBOTS_HOME/dependencies; fi
        sudo unzip -o -q $WEBOTS_HOME/dependencies/python3.8.zip -d /Library/Frameworks/Python.framework/Versions/3.8
    - name: Set Commit SHA in Version
      if: ${{ github.event_name == 'schedule' }}
      run: python src/packaging/set_commit_and_date_in_version.py ${{ github.sha }}
    - name: Webots Package Creation [Linux]
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        export JAVA_HOME=/usr/lib/jvm/java-${{ matrix.JAVA_VERSION }}-openjdk-amd64
        export PATH=/Library/Frameworks/Python.framework/Versions/3.8/bin:/Library/Frameworks/Python.framework/Versions/3.7/bin:$JAVA_HOME/bin:$PATH
        export LIBGL_ALWAYS_SOFTWARE=true
        xvfb-run --auto-servernum make distrib -j4
    - name: Webots Package Creation [macOS]
      if: ${{ startsWith(matrix.os, 'macos') }}
      run: |
        export JAVA_HOME="$(/usr/libexec/java_home -v 1.8)"
        export PATH=/usr/local/bin/:$PATH
        make distrib -j4
    - uses: actions/upload-artifact@v2
      with:
        name: build-${{ matrix.os }}
        path: |
          distribution/*.tar.bz2
          distribution/*.deb
    - name: Create/Update GitHub release
      if: ${{ (github.event_name == 'push' || github.event_name == 'schedule') && matrix.os == 'ubuntu-20.04' }}
      run: |
        sudo apt -y install rename
        sudo python -m pip install requests PyGithub
        rename 's/\.tar.bz2$/_${{ matrix.os }}.tar.bz2/' distribution/*.tar.bz2
        src/packaging/publish_release.py --key=${{ secrets.GITHUB_TOKEN }} --repo=${{ github.repository }} --branch=${{ github.ref }} --commit=${{ github.sha }} --tag=${{ github.ref }}
  test-suite:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        test: [tests/test_suite.py]
        post_task: [""]
        include:
          - os: ubuntu-18.04
            test: src/packaging/update_all_worlds.py
            post_task: "if [[ \"$(git diff --name-only *.wbt *.wbproj | wc -l)\" -ne \"0\" ]]; then echo Some world and/or wbproj files are not up to date: \"$(git diff *.wbt *.wbproj)\"; exit -1; fi"
    runs-on: ${{ matrix.os }}
    steps:  
    - uses: actions/checkout@v2
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-${{ matrix.os }}
        path: artifact
    - name: Extract Webots
      run: tar xjf artifact/webots-*-x86-64.tar.bz2 -C artifact
    - name: Install Webots Dependencies
      run: |
        sudo apt update
        sudo apt -y install g++ make ffmpeg libavcodec-extra libglu1-mesa libxkbcommon-x11-dev execstack libusb-dev libxcb-keysyms1 libxcb-image0 libxcb-icccm4 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: ${{ matrix.test }}
      run: |
        export LIBGL_ALWAYS_SOFTWARE=true
        export WEBOTS_DISABLE_SAVE_SCREEN_PERSPECTIVE_ON_CLOSE=true
        export WEBOTS_HOME=$PWD/artifact/webots
        xvfb-run --auto-servernum python ${{ matrix.test }}
        ${{ matrix.post_task }}