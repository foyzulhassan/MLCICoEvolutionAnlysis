OBJECT [0,5418]
    FIELD [1,12]
        String: "name" [1,7]
        STRING [8,12]
            String: "CI" [8,12]
    FIELD [13,161]
        String: "on" [13,17]
        OBJECT [18,161]
            FIELD [19,57]
                String: "pull_request" [19,33]
                OBJECT [34,57]
                    FIELD [35,56]
                        String: "branches" [35,45]
                        ARRAY [46,56]
                            STRING [47,55]
                                String: "master" [47,55]
            FIELD [58,99]
                String: "push" [58,64]
                OBJECT [65,99]
                    FIELD [66,87]
                        String: "branches" [66,76]
                        ARRAY [77,87]
                            STRING [78,86]
                                String: "master" [78,86]
                    FIELD [88,98]
                        String: "tags" [88,94]
                        STRING [95,98]
                            String: "*" [95,98]
            FIELD [100,135]
                String: "schedule" [100,110]
                ARRAY [111,135]
                    OBJECT [112,134]
                        FIELD [113,133]
                            String: "cron" [113,119]
                            STRING [120,133]
                                String: "00 04 * * 1" [120,133]
            FIELD [136,160]
                String: "workflow_dispatch" [136,155]
                NULL [156,160]
    FIELD [162,5417]
        String: "jobs" [162,168]
        OBJECT [169,5417]
            FIELD [170,5416]
                String: "test" [170,176]
                OBJECT [177,5416]
                    FIELD [178,203]
                        String: "runs-on" [178,187]
                        STRING [188,203]
                            String: "ubuntu-latest" [188,203]
                    FIELD [204,5415]
                        String: "steps" [204,211]
                        ARRAY [212,5415]
                            OBJECT [213,243]
                                FIELD [214,242]
                                    String: "uses" [214,220]
                                    STRING [221,242]
                                        String: "actions/checkout@v2" [221,242]
                            OBJECT [244,5414]
                                FIELD [245,5413]
                                    String: "run" [245,250]
                                    STRING [251,5413]
                                        String: "sudo apt-get install -y hhsuite # Install HH-suite\ngit clone --recursive https://github.com/soedinglab/CCMpred.git # Install CCMpred\ncd CCMpred\ncmake -DWITH_CUDA=OFF .\nmake\ncd ..\nsudo apt-get install -y freecontact # Install FreeContact\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh # Install Conda - see Conda docs\nbash miniconda.sh -b -p ./miniconda\nsource miniconda/etc/profile.d/conda.sh\nhash -r\nconda config --set always_yes yes --set changeps1 no\nconda update -q conda\nconda info -a\nconda create -q -n dmpfold numpy scipy # Create environment with NumPy and SciPy\nconda activate dmpfold\nexport KEY_MODELLER=${{ secrets.MODELLERKEY }}\nconda install modeller -c salilab # Install MODELLER\nconda install pytorch torchvision cpuonly -c pytorch # Install Pytorch\nexport PATH=\"~/build/psipred/DMPfold/miniconda/bin:$PATH\"\nwhich -a python3\npython3 -c \"import torch\"\ncurl ${{ secrets.DEPENDENCYURL }}/cns_solve_1.3.tgz -o cns_solve_1.3.tgz # Install CNS; this is a version with fixes outlined in the README\ntar -zxvf cns_solve_1.3.tgz\ncd cnsfiles # Download and patch CNS scripts\nsh installscripts.sh\ncd ..\ngit clone https://github.com/weizhongli/cdhit.git # Install CD-HIT\ncd cdhit\nmake\ncd ..\nsudo apt-get install -y csh # Install csh shell\nsudo apt-get install -y libgfortran3 # Install libgfortran3\ncurl ${{ secrets.DEPENDENCYURL }}/ncbi_legacy.tgz -o ncbi_legacy.tgz # Install legacy NCBI BLAST software\ntar -zxvf ncbi_legacy.tgz\ncd src # Test compilation of source files\nmake\nls\ncd ..\nsed -i \"s/set dmpfolddir = ~\\/DMPfold/set dmpfolddir = ~\\/build\\/psipred\\/DMPfold/\" seq2maps.csh # Modify installed locations\nsed -i \"s/set ccmpreddir = ~\\/CCMpred\\/bin/set ccmpreddir = .\\/CCMpred\\/bin/\" seq2maps.csh\nsed -i \"s/set freecontactcmd = ~\\/freecontact\\/bin\\/freecontact/set freecontactcmd = freecontact/\" seq2maps.csh\nsed -i \"s/set ncbidir = ~\\/blast\\/bin/set ncbidir = ~\\/build\\/psipred\\/DMPfold\\/ncbi_legacy/\" seq2maps.csh\nsed -i \"s/set dmpfolddir = ~\\/DMPfold/set dmpfolddir = ~\\/build\\/psipred\\/DMPfold/\" aln2maps.csh\nsed -i \"s/set ccmpreddir = ~\\/CCMpred\\/bin/set ccmpreddir = .\\/CCMpred\\/bin/\" aln2maps.csh\nsed -i \"s/set freecontactcmd = ~\\/freecontact\\/bin\\/freecontact/set freecontactcmd = freecontact/\" aln2maps.csh\nsed -i \"s/set ncbidir = ~\\/blast\\/bin/set ncbidir = ~\\/build\\/psipred\\/DMPfold\\/ncbi_legacy/\" aln2maps.csh\nsed -i \"s/set dmpfolddir = ~\\/dmpfold/set dmpfolddir = ~\\/build\\/psipred\\/DMPfold/\" bin/runpsipredandsolvwithdb\nsed -i \"s/set ncbidir = ~\\/blast\\/bin/set ncbidir = ~\\/build\\/psipred\\/DMPfold\\/ncbi_legacy/\" bin/runpsipredandsolvwithdb\nsed -i \"s/dmpfolddir=~\\/DMPfold/dmpfolddir=~\\/build\\/psipred\\/DMPfold/\" run_dmpfold.sh\nsed -i \"s/source ~\\/cns_solve_1.3\\/.cns_solve_env.sh/source ~\\/build\\/psipred\\/DMPfold\\/cns_solve_1.3\\/cns_solve_env_sh/\" run_dmpfold.sh\nsed -i \"s/dmpfolddir=~\\/DMPfold/dmpfolddir=~\\/build\\/psipred\\/DMPfold/\" predict_tmscore.sh\nsed -i \"s/cdhitcmd=~\\/cdhit\\/cd-hit/cdhitcmd=.\\/cdhit\\/cd-hit/\" predict_tmscore.sh\nsed -i \"s/\\$HHBIN\\/hhblits/#\\$HHBIN\\/hhblits/\" seq2maps.csh # For autobuild, eliminate HHblits step and use existing a3m file\ncp example/PF10963.a3m .\nulimit -s unlimited\ncsh seq2maps.csh example/PF10963.fasta # Generate map and 21c files from single sequence\ndu -h PF10963.* # Check files generated okay\nbash run_dmpfold.sh example/PF10963.fasta PF10963.21c PF10963.map ./PF10963_fasta 3 5 # Run DMPfold\nhead PF10963_fasta/final_1.pdb\nbash predict_tmscore.sh example/PF10963.fasta PF10963.aln PF10963_fasta/final_1.pdb PF10963_fasta/rawdistpred.1 # Predict TM-score\ncurl https://zhanglab.ccmb.med.umich.edu/TM-align/TMalign.gz | gunzip > TMalign # Download TMalign\nchmod +x TMalign\n./TMalign PF10963_fasta/final_1.pdb example/3FGX.pdb # Check model accuracy\ntma=$(./TMalign PF10963_fasta/final_1.pdb example/3FGX.pdb | grep \"if normalized by length of Chain_1\" | sed -E 's/^.{10}//' | sed -E 's/.{37}$//')\nif (( $(echo \"$tma >= 0.5\" | bc -l) )); then echo \"Correct fold, TMalign score $tma\"; else echo \"Incorrect fold, TMalign score $tma\"; exit 1; fi # Throw an error if the model is the wrong fold\nrm PF10963.*\nmkdir temp1 temp2 # For the run from an alignment we also check that it works when run in another directory\ncd temp1\ncsh ../aln2maps.csh ../example/PF10963.aln # Generate map and 21c files from alignment\ndu -h PF10963.* # Check files generated okay\ncd ../temp2\nbash ../run_dmpfold.sh ../example/PF10963.fasta ../temp1/PF10963.21c ../temp1/PF10963.map ../PF10963_aln 3 5 # Run DMPfold on new inputs\ncd ..\nhead PF10963_aln/final_1.pdb\n./TMalign PF10963_aln/final_1.pdb example/3FGX.pdb # Check model accuracy\ntma=$(./TMalign PF10963_aln/final_1.pdb example/3FGX.pdb | grep \"if normalized by length of Chain_1\" | sed -E 's/^.{10}//' | sed -E 's/.{37}$//')\nif (( $(echo \"$tma >= 0.5\" | bc -l) )); then echo \"Correct fold, TMalign score $tma\"; else echo \"Incorrect fold, TMalign score $tma\"; exit 1; fi # Throw an error if the model is the wrong fold" [251,5413]