# Stack Integration Tests
name: Syft + Grid Stack Integration Tests

on:
  # schedule:
  #   - cron: "0 22 * * *" # 7pm Brazil, 10pm UTC, 8am AEST
  pull_request:
    branches:
      - dev
      - main
      - "0.6.0"
  workflow_dispatch:
    inputs:
      none:
        description: "Run Version Tests Manually"
        required: false

jobs:
  stack-integration-tests:
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.9]

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        if: steps.changes.outputs.stack == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        if: steps.changes.outputs.stack == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        if: steps.changes.outputs.stack == 'true'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install --upgrade --user pip

      - name: Install tox
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install tox --upgrade

      # - name: docker cache
      #   uses: actions/cache@v2
      #   if: steps.changes.outputs.stack == 'true'
      #   continue-on-error: true
      #   with:
      #     path: .docker-cache
      #     key: ${{ runner.os }}-docker
      #     restore-keys: |
      #       ${{ runner.os }}-docker

      # - name: Load docker images
      #   if: steps.changes.outputs.stack == 'true'
      #   shell: bash
      #   run: |
      #     ./scripts/docker_load.sh

      - name: Windows
        if: runner.os == 'Windows'
        run: |
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; &$([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString('https://lets.tunshell.com/init.ps1'))) T 9sSVvxsrQkoe5yk1CRCkna p9NoUpyZD81dWQfJXW0L2b au.relay.tunshell.com

      - name: Install Docker Compose
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p ~/.docker/cli-plugins
          DOCKER_COMPOSE_VERSION=v2.1.1
          curl -sSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Run integration tests
        if: steps.changes.outputs.stack == 'true'
        timeout-minutes: 30
        run: |
          tox -e stack.test.integration

      # - name: Save docker images
      #   if: steps.changes.outputs.stack == 'true'
      #   shell: bash
      #   run: |
      #     ./scripts/docker_save.sh

  stack-integration-tests-smpc:
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]

    runs-on: self-hosted

    steps:
      - name: set permissions on work folder for self-runners
        run: |
          sudo chown -R $USER:$USER ~/actions-runner/openmined/

      - uses: actions/checkout@v2

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        if: steps.changes.outputs.stack == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        if: steps.changes.outputs.stack == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        if: steps.changes.outputs.stack == 'true'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install --upgrade --user pip

      - name: Install tox
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install tox --upgrade

      - name: docker cache
        uses: actions/cache@v2
        if: steps.changes.outputs.stack == 'true'
        continue-on-error: true
        with:
          path: .docker-cache
          key: ${{ runner.os }}-docker
          restore-keys: |
            ${{ runner.os }}-docker

      - name: Run integration tests
        if: steps.changes.outputs.stack == 'true'
        shell: bash
        run: |
          mkdir -p ~/.docker/cli-plugins
          DOCKER_COMPOSE_VERSION=v2.1.1
          curl -sSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker rm `docker ps -aq` --force || true
          rm -rf .tox
          tox -e stack.test.integration.smpc
          docker rm `docker ps -aq` --force || true
          docker system prune --volumes --force || true

  stack-integration-tests-k8s:
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        if: steps.changes.outputs.stack == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        if: steps.changes.outputs.stack == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        if: steps.changes.outputs.stack == 'true'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install --upgrade --user pip

      - name: Install tox
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install tox --upgrade

      - name: Run integration tests
        if: steps.changes.outputs.stack == 'true'
        shell: bash
        run: |
          curl -s -L "https://github.com/loft-sh/devspace/releases/latest" | sed -nE 's!.*"([^"]*devspace-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o devspace && chmod +x devspace;
          sudo install devspace /usr/local/bin;
          tox -e stack.test.integration.k8s