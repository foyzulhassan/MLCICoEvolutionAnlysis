name: VM Tests - Stack

on:
  workflow_call:

  pull_request:
    branches:
      - dev
      - main
      - "0.8"

  workflow_dispatch:
    inputs:
      none:
        description: "Run Version Tests Manually"
        required: false

jobs:
  pr-tests-stack:
    strategy:
      max-parallel: 99
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
        node-type: ["vm"]
      fail-fast: false

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        if: steps.changes.outputs.stack == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        if: steps.changes.outputs.stack == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        if: steps.changes.outputs.stack == 'true'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        if: steps.changes.outputs.stack == 'true'
        run: |
          python -m pip install --upgrade --user pip

      - name: Install tox
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install -U tox

      - name: Run notebook tests
        if: steps.changes.outputs.syft == 'true'
        env:
          ORCHESTRA_NODE_TYPE: "${{ matrix.node-type }}"
        run: |
          tox -e stack.test.vm

      #Run log collector python script
      - name: Run log collector
        timeout-minutes: 5
        if: failure()
        shell: bash
        run: |
          python ./scripts/container_log_collector.py

      # Get Job name and url
      - name: Get job name and url
        id: job_name
        if: failure()
        run: |
          echo "::set-output name=job_name::$(echo ${{ github.job }})"
          echo "::set-output name=url::$(echo ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Get current date
        id: date
        if: failure()
        shell: bash
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Upload logs to GitHub
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ steps.job_name.outputs.job_name }}-${{ matrix.pytest-modules }}-logs-${{ steps.date.outputs.date }}
          path: ./logs/${{ steps.job_name.outputs.job_name}}/

      #Get Pull request url
      - name: Get pull request url
        id: pull_request
        if: failure()
        run: |
          echo "::set-output name=url::$(echo ${{ github.event.pull_request.html_url }})"

      - name: Job Report Status
        # cant access secrets on forks
        if: github.repository == 'OpenMined/PySyft' && failure()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: "failure"
          notification_title: " {workflow} has {status_message}"
          message_format: "${{matrix.os}} {emoji} *{job}* {status_message} in {run_url}"
          footer: "Find the PR here ${{ steps.pull_request.outputs.url }}"
          mention_users: "U01LNCACY03,U8KUAD396,UNMQ2SJSW,U01SAESBJA0"
          mention_users_when: "failure,warnings"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK_WEBHOOK_URL }}