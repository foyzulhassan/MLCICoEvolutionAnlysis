name: CD - Syft - Deploy `dev` to K8s

on:
  # TODO: Re-enable once merged & tested
  # schedule:
  #   - cron: "0 */3 * * *"

  workflow_dispatch:
    inputs:
      none:
        description: "Run Tests Manually"
        required: false

jobs:
  deploy-syft-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Checkout Openmined/infrastructure
        uses: actions/checkout@v4
        with:
          repository: OpenMined/infrastructure
          path: infrastructure

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure container registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set Grid package version
        id: grid
        shell: bash
        run: echo "GRID_VERSION=$(python packages/grid/VERSION)" >> $GITHUB_OUTPUT

      - name: Build and push `grid-backend` image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./packages
          file: ./packages/grid/backend/backend.dockerfile
          push: true
          target: backend
          tags: |
            ${{ secrets.ACR_SERVER }}/openmined/grid-backend:dev
            ${{ secrets.ACR_SERVER }}/openmined/grid-backend:${{ steps.grid.outputs.GRID_VERSION }}
            ${{ secrets.ACR_SERVER }}/openmined/grid-backend:${{ github.sha }}
          # cache-from: type=registry,ref=${{ steps.meta_grid_backend.outputs.tags }}
          # cache-to: type=inline

      - name: Build and push `grid-frontend` image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./packages/grid/frontend
          file: ./packages/grid/frontend/frontend.dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_SERVER }}/openmined/grid-frontend:dev
            ${{ secrets.ACR_SERVER }}/openmined/grid-frontend:${{ steps.grid.outputs.GRID_VERSION }}
            ${{ secrets.ACR_SERVER }}/openmined/grid-frontend:${{ github.sha }}
          target: grid-ui-development
          # cache-from: type=registry,ref=${{ steps.meta_grid_frontend.outputs.tags }}
          # cache-to: type=inline

      - name: Build and push `grid-enclave` image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./packages
          file: ./packages/grid/worker/worker.dockerfile
          push: true
          target: worker
          tags: |
            ${{ secrets.ACR_SERVER }}/openmined/grid-enclave:dev
            ${{ secrets.ACR_SERVER }}/openmined/grid-enclave:${{ steps.grid.outputs.GRID_VERSION }}
            ${{ secrets.ACR_SERVER }}/openmined/grid-enclave:${{ github.sha }}
          # cache-from: type=registry,ref=${{ steps.meta_grid_enclave.outputs.tags }}
          # cache-to: type=inline

      - name: Build and push `grid-headscale` image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./packages/grid/vpn
          file: ./packages/grid/vpn/headscale.dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_SERVER }}/openmined/grid-headscale:dev
            ${{ secrets.ACR_SERVER }}/openmined/grid-headscale:${{ steps.grid.outputs.GRID_VERSION }}
            ${{ secrets.ACR_SERVER }}/openmined/grid-headscale:${{ github.sha }}
          # cache-from: type=registry,ref=${{ steps.meta_grid_headscale.outputs.tags }}
          # cache-to: type=inline

      - name: Build and push `grid-tailscale` image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./packages/grid/vpn
          file: ./packages/grid/vpn/tailscale.dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_SERVER }}/openmined/grid-tailscale:dev
            ${{ secrets.ACR_SERVER }}/openmined/grid-tailscale:${{ steps.grid.outputs.GRID_VERSION }}
            ${{ secrets.ACR_SERVER }}/openmined/grid-tailscale:${{ github.sha }}
          # cache-from: type=registry,ref=${{ steps.meta_grid_tailscale.outputs.tags }}
          # cache-to: type=inline

      - name: Build and push `grid-vpn-iptables` image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./packages/grid/vpn
          file: ./packages/grid/vpn/iptables.dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_SERVER }}/openmined/grid-vpn-iptables:dev
            ${{ secrets.ACR_SERVER }}/openmined/grid-vpn-iptables:${{ steps.grid.outputs.GRID_VERSION }}
            ${{ secrets.ACR_SERVER }}/openmined/grid-vpn-iptables:${{ github.sha }}
          # cache-from: type=registry,ref=${{ steps.meta_grid_vpn_iptables.outputs.tags }}
          # cache-to: type=inline

      - name: Build Helm Chart & Copy to infra
        shell: bash
        run: |
          K3D_VERSION=v5.6.0
          DEVSPACE_VERSION=v6.3.3

          # install k3d
          wget https://github.com/k3d-io/k3d/releases/download/${K3D_VERSION}/k3d-linux-amd64
          mv k3d-linux-amd64 k3d
          chmod +x k3d
          export PATH=`pwd`:$PATH
          k3d version

          # Install devspace
          curl -sSL https://github.com/loft-sh/devspace/releases/download/${DEVSPACE_VERSION}/devspace-linux-amd64 -o ./devspace
          chmod +x devspace
          devspace version

          export CONTAINER_REGISTRY=${{ secrets.ACR_SERVER }}/
          tox -e syft.build.helm

          rm -rf infrastructure/gitops/environments/dev/
          mkdir -p infrastructure/gitops/environments/dev/
          cp -R packages/grid/helm/syft/. packages/grid/helm/manifests.yaml infrastructure/gitops/environments/dev/

      - name: Commit & push changes to Infra Repo
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Madhava Jay
          author_email: madhava@openmined.org
          message: "[env] Update dev helm charts"
          cwd: infrastructure
          pull: NO-PULL