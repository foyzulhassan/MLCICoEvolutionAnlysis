# References:
# - https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
# - https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
# - https://github.com/intel/dffml/blob/main/.github/workflows/dispatch_build_images_containers.yml
name: "DFFML: Build: Images: Containers"

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "Dockerfile"

jobs:
  manifest:
    runs-on: ubuntu-latest
    outputs:
      manifest: ${{ steps.create-manifest-instance.outputs.manifest }}
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/checkout@v3
      - name: Build manifest from changed dockerfiles
        id: create-manifest-instance
        env:
          # Must be a valid directory with "*Dockerfile"s in it
          PREFIX: ""
          ROOT_PATH: "."
          OWNER_REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          COMPARE_URL: ${{ github.event.repository.compare_url }}
          GH_ACCESS_TOKEN: ${{ github.token }}
          HEAD: ${{ github.event.after }}
          BASE: ${{ github.event.before }}
          BASE_REF: ${{ github.base_ref }}
        shell: python -u {0}
        run: |
          import os
          import json
          import pathlib
          import urllib.request
          owner, repository = os.environ["OWNER_REPOSITORY"].split("/", maxsplit=1)
          base = None
          env_vars = ["BASE", "BASE_REF"]
          for env_var in env_vars:
              if env_var in os.environ and os.environ[env_var].strip():
                  # Set if present and not blank
                  base = os.environ[env_var]
          manifest = []
          if base is None:
              print(f"::notice file=dffml_build_images_containers,line=1,endLine=1,title=nobase::None of {env_vars!r} found in os.environ"
              compare_url = os.environ["COMPARE_URL"]
              compare_url = compare_url.replace("{base}", base)
              compare_url = compare_url.replace("{head}", os.environ["HEAD"])
              with urllib.request.urlopen(
                  urllib.request.Request(
                      compare_url,
                      headers={
                          "Authorization": "bearer " + os.environ["GH_ACCESS_TOKEN"],
                      },
                  )
              ) as response:
                  response_json = json.load(response)
              # Build the most recent commit
              commit = response_json["commits"][-1]["sha"]
              # Path to root of repo
              root_path = pathlib.Path(os.environ["ROOT_PATH"])
              # Must be a valid directory with .Dockerfiles in it
              prefix_path = pathlib.Path(os.environ["PREFIX"])
              manifest = list([
                  {
                      "image_name": pathlib.Path(compare_file["filename"]).stem,
                      "dockerfile": compare_file["filename"],
                      "owner": owner,
                      "repository": repository,
                      "branch": os.environ["BRANCH"],
                      "commit": commit,
                  }
                  for compare_file in response_json["files"]
                  if (
                      compare_file["filename"].startswith(os.environ["PREFIX"])
                      and compare_file["filename"].endswith("Dockerfile")
                  )
              ])
          # Build everything if we aren't sure why we got here (alice changes or
          # workflow re-run)
          if not manifest:
              manifest = list([
                  {
                      "image_name": path.stem,
                      "dockerfile": str(path.relative_to(root_path)),
                      "owner": owner,
                      "repository": repository,
                      "branch": os.environ["BRANCH"],
                      "commit": commit,
                  }
                  for path in prefix_path.glob("*Dockerfile")
              ])
          print(json.dumps(manifest, sort_keys=True, indent=4))
          print("::set-output name=manifest::" + json.dumps({"include": manifest}))

  build:
    needs: manifest
    uses: "./.github/workflows/build_images_containers.yml"
    with:
      manifests: "${{ needs.manifest.outputs.manifest }}"