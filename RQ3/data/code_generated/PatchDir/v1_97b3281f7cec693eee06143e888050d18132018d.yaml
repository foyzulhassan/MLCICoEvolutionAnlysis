name: CI Mac OS X 10.15

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: 10.13

jobs:
  build:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup keychain
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
        security create-keychain -p ${{ secrets.MACOS_CERTIFICATE_PW }} build.keychain
        security default-keychain -s build.keychain
        security set-keychain-settings -lut 10800
        security unlock-keychain -p ${{ secrets.MACOS_CERTIFICATE_PW }} build.keychain
        security import certificate.p12 -k build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PW }} -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ secrets.MACOS_CERTIFICATE_PW }} build.keychain
      shell: bash
    
    - name: Setup pyenv
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        MACOSX_DEPLOYMENT_TARGET: 10.13
        PYTHON_CONFIGURE_OPTS: "--enable-framework"
      uses: "gabrielfalcao/pyenv-action@v5"
      with:
          default: 3.6.9
        
    - name: Install dependencies
      run: |
        brew install openslide libomp
        pip3 install --upgrade pip
        pip3 install numpy==1.19.5 twine

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
            -DFAST_SIGN_CODE=${{ github.event_name == 'pull_request' && 'OFF' || 'ON' }} \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\
            -DFAST_MODULE_OpenVINO=ON \
            -DFAST_MODULE_Dicom=ON \
            -DFAST_MODULE_WholeSlideImaging=ON \
            -DFAST_MODULE_OpenIGTLink=ON \
            -DFAST_MODULE_Clarius=ON \
            -DFAST_MODULE_TensorFlow=ON \
            -DFAST_MODULE_HDF5=ON \
            -DFAST_MODULE_Plotting=ON \
            -DFAST_MODULE_Python=ON \
            -DFAST_Python_Version="3.6" \
            -DFAST_Python_Include="$(dirname $(pyenv which python))/../include/python3.6m/" \
            -DFAST_Python_Library="$(dirname $(pyenv which python))/../lib/libpython3.6.dylib" \
            -DFAST_MODULE_RealSense=OFF \
            -DFAST_BUILD_EXAMPLES=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 4

    - name: Build Python wheel
      env:
        MACOSX_DEPLOYMENT_TARGET: 10.13
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target python-wheel -j 4

    - name: Package
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package -j 4

    - name: Upload archive package
      uses: actions/upload-artifact@v2
      with:
        name: Archive package (tar.xz)
        path: ${{github.workspace}}/build/fast_*.tar.xz
        if-no-files-found: error

    - name: Upload Python wheel
      uses: actions/upload-artifact@v2
      with:
        name: Python wheel
        path: ${{github.workspace}}/build/python/dist/pyFAST-*.whl
        if-no-files-found: error

    - name: Upload archive package to release
      if: ${{ github.event_name == 'release' }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/fast_*.tar.xz
        file_glob: true
        tag: ${{ github.ref }}
        overwrite: true

    - name: Upload Python wheel to release
      if: ${{ github.event_name == 'release' }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/python/dist/pyFAST-*.whl
        file_glob: true
        tag: ${{ github.ref }}
        overwrite: true

    - name: Upload Python wheel to PyPi
      if: ${{ github.event_name == 'release' && !contains(github.ref, 'rc') }}
      run: |
        twine upload --username smistad --password ${{ secrets.PYPI_PASSWORD }} ${{github.workspace}}/build/python/dist/pyFAST-*.whl

    - name: Test PyPi upload
      if: ${{ github.event_name == 'release' && !contains(github.ref, 'rc') }}
      run: |
        sleep 30
        pip3 install pyfast==${GITHUB_REF#refs/tags/v}
      shell: bash

  test-cpp:
    name: Run C++ Tests
    needs: [build]
    runs-on: [self-hosted, macos]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: 'Archive package (tar.xz)'
          path: ${{github.workspace}}/download/
      - name: Extract artifact
        run: |
          mkdir -p ${{github.workspace}}/download/
          cd ${{github.workspace}}/download/
          tar -xf fast_*.tar.xz -C ${{github.workspace}}
      - name: Download test data
        run: |
          cd ${{github.workspace}}
          cd fast*
          cd fast/bin/
          ./downloadTestData
      - name: Run tests
        run: |
          cd ${{github.workspace}}
          cd fast_*
          cd fast/bin/
          ./testFAST ~[visual]
      - name: Cleanup
        if: always()
        run: |
          rm -Rf ${{github.workspace}}
          rm -Rf $HOME/FAST/kernel_binaries/*
          
  test-python:
    name: Run Python Tests
    needs: [build]
    runs-on: [self-hosted, macos]
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: 'Python wheel'
          path: ${{github.workspace}}/download/
      - name: Create environment and install python packages
        run: |
          cd ${{github.workspace}}
          mkdir tmp
          cd tmp
          virtualenv -p python3 venv
          source venv/bin/activate
          pip3 install pytest
          pip3 install ${{github.workspace}}/download/pyFAST-*.whl
      - name: Run tests
        run: |
          cd ${{github.workspace}}/tmp/
          source venv/bin/activate
          pytest ../source/FAST/
      - name: Cleanup
        if: always()
        run: |
          rm -Rf ${{github.workspace}}/download/
          rm -Rf ${{github.workspace}}/tmp/
          rm -Rf $HOME/FAST/kernel_binaries/*